<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coldairarrow.Util</name>
    </assembly>
    <members>
        <member name="T:Coldairarrow.Util.CacheHelper">
            <summary>
            缓存帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.CacheHelper.#cctor">
            <summary>
            静态构造函数，初始化缓存类型
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.CacheHelper.Cache">
            <summary>
            默认缓存
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.CacheHelper.SystemCache">
            <summary>
            系统缓存
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.CacheHelper.RedisCache">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.ICache">
            <summary>
            缓存操作接口类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.ICache.SetCache(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">主键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Coldairarrow.Util.ICache.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存
            注：默认过期类型为绝对过期
            </summary>
            <param name="key">主键</param>
            <param name="value">值</param>
            <param name="timeout">过期时间间隔</param>
        </member>
        <member name="M:Coldairarrow.Util.ICache.SetCache(System.String,System.Object,System.TimeSpan,Coldairarrow.Util.ExpireType)">
            <summary>
            设置缓存
            注：默认过期类型为绝对过期
            </summary>
            <param name="key">主键</param>
            <param name="value">值</param>
            <param name="timeout">过期时间间隔</param>
            <param name="expireType">过期类型</param>
        </member>
        <member name="M:Coldairarrow.Util.ICache.SetKeyExpire(System.String,System.TimeSpan)">
            <summary>
            设置键失效时间
            </summary>
            <param name="key">键值</param>
            <param name="expire">从现在起时间间隔</param>
        </member>
        <member name="M:Coldairarrow.Util.ICache.GetCache(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:Coldairarrow.Util.ICache.GetCache``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">主键</param>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Coldairarrow.Util.ICache.ContainsKey(System.String)">
            <summary>
            是否存在键值
            </summary>
            <param name="key">主键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ICache.RemoveCache(System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="T:Coldairarrow.Util.ValueInfoEntry">
            <summary>
            值信息
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.ExpireType">
            <summary>
            过期类型
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.ExpireType.Absolute">
            <summary>
            绝对过期
            注：即自创建一段时间后就过期
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.ExpireType.Relative">
            <summary>
            相对过期
            注：即该键未被访问后一段时间后过期，若此键一直被访问则过期时间自动延长
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.RedisCache">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.RedisCache.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置字符串</param>
            <param name="databaseIndex">数据库索引</param>
        </member>
        <member name="T:Coldairarrow.Util.SystemCache">
            <summary>
            系统缓存帮助类
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.BloomFilter`1">
            <summary>
            一个布隆过滤器
            </summary>
            <typeparam name="T">泛型数据类型</typeparam>
        </member>
        <member name="M:Coldairarrow.Util.BloomFilter`1.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化bloom滤波器并设置hash散列的最佳数目
            </summary>
            <param name="bitSize">布隆过滤器的大小(m)默认为10E消耗100M内存</param>
            <param name="setSize">集合的大小 (n)默认为1000W</param>
        </member>
        <member name="M:Coldairarrow.Util.BloomFilter`1.FalsePositiveProbability">
            <summary>
            计算遇到误检率的概率。
            </summary>
            <returns>Probability of a false positive</returns>
        </member>
        <member name="T:Coldairarrow.Util.BloomFilterWithShareMemory`1">
            <summary>
            共享内存布隆过滤器
            </summary>
            <typeparam name="T">泛型数据类型</typeparam>
        </member>
        <member name="M:Coldairarrow.Util.BloomFilterWithShareMemory`1.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            初始化bloom滤波器并设置hash散列的最佳数目
            </summary>
            <param name="bloomName"></param>
            <param name="bitSize">布隆过滤器的大小(m)默认为10E消耗100M内存</param>
            <param name="setSize">集合的大小 (n)默认为1000W</param>
        </member>
        <member name="M:Coldairarrow.Util.BloomFilterWithShareMemory`1.FalsePositiveProbability">
            <summary>
            计算遇到误检率的概率。
            </summary>
            <returns>Probability of a false positive</returns>
        </member>
        <member name="T:Coldairarrow.Util.ConsistentHash`1">
            <summary>
            一致性HASH,解决传统HASH的扩容难的问题
            注:常用与分布式缓存与分表
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="T:Coldairarrow.Util.ParentChildrenMapping">
            <summary>
            父子数据相互映射类
            注：父子数据都必须唯一,即所有父键唯一,所有子键唯一,唯一的子键能确定对应的父键,唯一的父键能确定其拥有的子键集合,
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.ParentChildrenMapping.AddChild(System.String,System.String)">
            <summary>
            添加子键
            </summary>
            <param name="parentId">所属父键</param>
            <param name="childId">子键</param>
        </member>
        <member name="M:Coldairarrow.Util.ParentChildrenMapping.RemoveChild(System.String,System.String)">
            <summary>
            删除子键
            </summary>
            <param name="parentId">所属父键</param>
            <param name="childId">子键</param>
        </member>
        <member name="M:Coldairarrow.Util.ParentChildrenMapping.RemoveParent(System.String)">
            <summary>
            删除父键
            注:会删除该父键以及该父键下面的所有子键
            </summary>
            <param name="parentId"></param>
        </member>
        <member name="M:Coldairarrow.Util.ParentChildrenMapping.ExistsParent(System.String)">
            <summary>
            父键是否存在
            </summary>
            <param name="parentId">父键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ParentChildrenMapping.ExistsChild(System.String)">
            <summary>
            子键是否存在
            </summary>
            <param name="childId">子键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ParentChildrenMapping.GetChildren(System.String)">
            <summary>
            获取父键拥有的所有子键
            </summary>
            <param name="parentId">父键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ParentChildrenMapping.GetAllParents">
            <summary>
            获取所有父键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ParentChildrenMapping.GetAllChildren">
            <summary>
            获取所有子键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ParentChildrenMapping.GetParent(System.String)">
            <summary>
            获取父键
            </summary>
            <param name="childId">子键</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.ShareMenmory">
            <summary>
            共享内存
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory.OpenExists(System.String,System.Int64)">
            <summary>
            获取共享内存
            </summary>
            <param name="mapName">内存名</param>
            <param name="Size">大小</param>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory.Read(System.Int32,System.Int32)">
            <summary>
            从共享内存读数据
            </summary>
            <param name="lngSize">数据长度</param>
            <param name="ofset">指针偏移量</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory.Write(System.Byte[],System.Int32)">
            <summary>
            将数据写入内存中
            </summary>
            <param name="bytData">需要写入的数据</param>
            <param name="offset">目的内存地址偏移量</param>
        </member>
        <member name="T:Coldairarrow.Util.ShareMenmory`1">
            <summary>
            共享内存之操作泛型实体类
            </summary>
            <typeparam name="T">泛型参数</typeparam>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory`1.OpenExists(System.String,System.Int64)">
            <summary>
            获取共享内存
            </summary>
            <param name="mapName">内存名</param>
            <param name="Size">大小</param>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory`1.Read(System.Int32,System.Int32)">
            <summary>
            从共享内存读数据
            </summary>
            <param name="lngSize">数据长度</param>
            <param name="ofset">指针偏移量</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory`1.Write(System.Byte[],System.Int32)">
            <summary>
            将数据写入内存中
            </summary>
            <param name="bytData">需要写入的数据</param>
            <param name="offset">目的内存地址偏移量</param>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory`1.GetUrl(System.Int32)">
            <summary>
            获取URL
            </summary>
            <param name="index">所需要获取URL的索引序号</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory`1.SetUrl(System.Int32,System.String)">
            <summary>
            保存URL
            </summary>
            <param name="index">保存的位置（索引序号）</param>
            <param name="url">URL</param>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory`1.GetState(System.Int32)">
            <summary>
            获取状态
            </summary>
            <param name="index">索引序号</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory`1.SetState(System.Int32,System.Int32)">
            <summary>
            设置状态
            </summary>
            <param name="index">索引序号</param>
            <param name="state">状态（0为未爬取，1为已经爬取）</param>
        </member>
        <member name="M:Coldairarrow.Util.ShareMenmory`1.SetEntity(System.Int32,`0)">
            <summary>
            保存实体类
            </summary>
            <param name="index">索引序号</param>
            <param name="t">实体类型</param>
        </member>
        <member name="T:Coldairarrow.Util.TaskQeury">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.TaskQeury.#ctor">
            <summary>
            默认队列
            注：默认间隔时间1ms
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.TaskQeury.#ctor(System.TimeSpan)">
            <summary>
            间隔任务队列
            注：每个任务之间间隔一段时间
            </summary>
            <param name="timeSpan">间隔时间</param>
        </member>
        <member name="T:Coldairarrow.Util.UsingLock`1">
            <summary>
            使用using代替lock操作的对象,可指定写入和读取锁定模式
            参考:https://www.cnblogs.com/blqw/p/3475734.html
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Coldairarrow.Util.UsingLock`1.Lock">
            <summary> 利用IDisposable的using语法糖方便的释放锁定操作
            <para>内部类</para>
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.UsingLock`1.Lock._Lock">
            <summary> 读写锁对象
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.UsingLock`1.Lock._IsWrite">
            <summary> 是否为写入模式
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.UsingLock`1.Lock.#ctor(System.Threading.ReaderWriterLockSlim,System.Boolean)">
            <summary> 利用IDisposable的using语法糖方便的释放锁定操作
            <para>构造函数</para>
            </summary>
            <param name="rwl">读写锁</param>
            <param name="isWrite">写入模式为true,读取模式为false</param>
        </member>
        <member name="M:Coldairarrow.Util.UsingLock`1.Lock.Dispose">
            <summary> 释放对象时退出指定锁定模式
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.UsingLock`1.Disposable">
            <summary> 空的可释放对象,免去了调用时需要判断是否为null的问题
            <para>内部类</para>
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.UsingLock`1.Disposable.Empty">
            <summary> 空的可释放对象
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.UsingLock`1.Disposable.Dispose">
            <summary> 空的释放方法
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.UsingLock`1._LockSlim">
            <summary> 读写锁
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.UsingLock`1._Data">
            <summary> 保存数据
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.UsingLock`1.#ctor">
            <summary> 使用using代替lock操作的对象,可指定写入和读取锁定模式
            <para>构造函数</para>
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.UsingLock`1.Data">
            <summary> 获取或设置当前对象中保存数据的值
            </summary>
            <exception cref="T:System.MemberAccessException">获取数据时未进入读取或写入锁定模式</exception>
            <exception cref="T:System.MemberAccessException">设置数据时未进入写入锁定模式</exception>
        </member>
        <member name="P:Coldairarrow.Util.UsingLock`1.Enabled">
            <summary> 是否启用,当该值为false时,Read()和Write()方法将返回 Disposable.Empty
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.UsingLock`1.Read">
            <summary> 进入读取锁定模式,该模式下允许多个读操作同时进行
            <para>退出读锁请将返回对象释放,建议使用using语块</para>
            <para>Enabled为false时,返回Disposable.Empty;</para>
            <para>在读取或写入锁定模式下重复执行,返回Disposable.Empty;</para>
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.UsingLock`1.Write">
            <summary> 进入写入锁定模式,该模式下只允许同时执行一个读操作
            <para>退出读锁请将返回对象释放,建议使用using语块</para>
            <para>Enabled为false时,返回Disposable.Empty;</para>
            <para>在写入锁定模式下重复执行,返回Disposable.Empty;</para>
            </summary>
            <exception cref="T:System.NotImplementedException">读取模式下不能进入写入锁定状态</exception>
        </member>
        <member name="T:Coldairarrow.Util.DbHelper">
            <summary>
            描述：数据库操作抽象帮助类
            作者：Coldairarrow
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.#ctor(Coldairarrow.Util.DatabaseType,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="conStr">连接名或连接字符串</param>
        </member>
        <member name="F:Coldairarrow.Util.DbHelper._dbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.DbHelper._conStr">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.DbHelper._extraUsingNamespace">
            <summary>
            实体需要引用的额外命名空间
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.DbHelper.DbTypeDic">
            <summary>
            类型映射字典
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.GetDataTableWithSql(System.String)">
            <summary>
            通过数据库连接字符串和Sql语句查询返回DataTable
            </summary>
            <param name="sql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.GetDataTableWithSql(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            通过数据库连接字符串和Sql语句查询返回DataTable,参数化查询
            </summary>
            <param name="sql">Sql语句</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.GetListBySql``1(System.String)">
            <summary>
            通过数据库连接字符串和Sql语句查询返回List
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sqlStr">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.GetListBySql``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            通过数据库连接字符串和Sql语句查询返回List,参数化查询
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="sqlStr">Sql语句</param>
            <param name="param">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.ExecuteSql(System.String)">
            <summary>
            执行无返回值的Sql语句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.ExecuteSql(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行无返回值的Sql语句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="paramters"></param>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.GetDbAllTables(System.String)">
            <summary>
            获取数据库中的所有表
            </summary>
            <param name="schemaName">模式（架构）</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.GetDbTableInfo(System.String)">
            <summary>
            通过连接字符串和表名获取数据库表的信息
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.DbTypeStr_To_CsharpType(System.String)">
            <summary>
            将数据库类型转为对应C#数据类型
            </summary>
            <param name="dbTypeStr">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbHelper.SaveEntityToFile(System.Collections.Generic.List{Coldairarrow.Util.TableInfo},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            生成实体文件
            </summary>
            <param name="infos">表字段信息</param>
            <param name="tableName">表名</param>
            <param name="tableDescription">表描述信息</param>
            <param name="filePath">文件路径（包含文件名）</param>
            <param name="nameSpace">实体命名空间</param>
            <param name="schemaName">架构（模式）名</param>
        </member>
        <member name="T:Coldairarrow.Util.DbHelperFactory">
            <summary>
            描述：数据库帮助类工厂
            作者：Coldairarrow
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.DbHelperFactory.GetDbHelper(Coldairarrow.Util.DatabaseType,System.String)">
            <summary>
            获取指定的数据库帮助类
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="conStr">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbHelperFactory.GetDbHelper(System.String,System.String)">
            <summary>
            获取指定的数据库帮助类
            </summary>
            <param name="dbTypeStr"></param>
            <param name="conStr">连接字符串</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.DbProviderFactoryHelper">
            <summary>
            数据库操作提供源工厂帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.DbProviderFactoryHelper.GetDbProviderFactory(Coldairarrow.Util.DatabaseType)">
            <summary>
            获取提供工厂
            </summary>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbProviderFactoryHelper.GetDbConnection(Coldairarrow.Util.DatabaseType)">
            <summary>
            获取DbConnection
            </summary>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbProviderFactoryHelper.GetDbCommand(Coldairarrow.Util.DatabaseType)">
            <summary>
            获取DbCommand
            </summary>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbProviderFactoryHelper.GetDbParameter(Coldairarrow.Util.DatabaseType)">
            <summary>
            获取DbParameter
            </summary>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbProviderFactoryHelper.GetDataAdapter(Coldairarrow.Util.DatabaseType)">
            <summary>
            获取DataAdapter
            </summary>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbProviderFactoryHelper.DbTypeStrToDbType(System.String)">
            <summary>
            将数据库类型字符串转换为对应的数据库类型
            </summary>
            <param name="dbTypeStr">数据库类型字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbProviderFactoryHelper.DbTypeToDbTypeStr(Coldairarrow.Util.DatabaseType)">
            <summary>
            将数据库类型转换为对应的数据库类型字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbProviderFactoryHelper.GetConStr(System.String)">
            <summary>
            通过连接名或连接字符串获取连接字符串
            </summary>
            <param name="nameOrconStr">连接名或者连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbProviderFactoryHelper.GetDbConnection(System.String,Coldairarrow.Util.DatabaseType)">
            <summary>
            获取数据库连接对象
            </summary>
            <param name="conStr">连接字符串</param>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.MySqlHelper">
            <summary>
            MySql数据库操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.MySqlHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nameOrConStr">数据库连接名或连接字符串</param>
        </member>
        <member name="M:Coldairarrow.Util.MySqlHelper.GetDbAllTables(System.String)">
            <summary>
            获取数据库中的所有表
            </summary>
            <param name="schemaName">模式（架构）</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.MySqlHelper.GetDbTableInfo(System.String)">
            <summary>
            通过连接字符串和表名获取数据库表的信息
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.MySqlHelper.SaveEntityToFile(System.Collections.Generic.List{Coldairarrow.Util.TableInfo},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            生成实体文件
            </summary>
            <param name="infos">表字段信息</param>
            <param name="tableName">表名</param>
            <param name="tableDescription">表描述信息</param>
            <param name="filePath">文件路径（包含文件名）</param>
            <param name="nameSpace">实体命名空间</param>
            <param name="schemaName">架构（模式）名</param>
        </member>
        <member name="T:Coldairarrow.Util.OracleHelper">
            <summary>
            Oracle数据库操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.OracleHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nameOrConStr">数据库连接名或连接字符串</param>
        </member>
        <member name="M:Coldairarrow.Util.OracleHelper.GetDbAllTables(System.String)">
            <summary>
            获取数据库中的所有表
            </summary>
            <param name="schemaName">模式（架构）</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.OracleHelper.GetDbTableInfo(System.String)">
            <summary>
            通过连接字符串和表名获取数据库表的信息
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.OracleHelper.SaveEntityToFile(System.Collections.Generic.List{Coldairarrow.Util.TableInfo},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            生成实体文件
            </summary>
            <param name="infos">表字段信息</param>
            <param name="tableName">表名</param>
            <param name="tableDescription">表描述信息</param>
            <param name="filePath">文件路径（包含文件名）</param>
            <param name="nameSpace">实体命名空间</param>
            <param name="schemaName">架构（模式）名</param>
        </member>
        <member name="T:Coldairarrow.Util.PostgreSqlHelper">
            <summary>
            PostgreSql数据库操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.PostgreSqlHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nameOrConStr">数据库连接名或连接字符串</param>
        </member>
        <member name="M:Coldairarrow.Util.PostgreSqlHelper.GetDbAllTables(System.String)">
            <summary>
            获取数据库中的所有表
            </summary>
            <param name="schemaName">模式（架构）</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.PostgreSqlHelper.GetDbTableInfo(System.String)">
            <summary>
            通过连接字符串和表名获取数据库表的信息
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.PostgreSqlHelper.SaveEntityToFile(System.Collections.Generic.List{Coldairarrow.Util.TableInfo},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            生成实体文件
            </summary>
            <param name="infos">表字段信息</param>
            <param name="tableName">表名</param>
            <param name="tableDescription">表描述信息</param>
            <param name="filePath">文件路径（包含文件名）</param>
            <param name="nameSpace">实体命名空间</param>
            <param name="schemaName">架构（模式）名</param>
        </member>
        <member name="T:Coldairarrow.Util.RedisHelper">
            <summary>
            Redis帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.RedisHelper.GetConnection(System.String,System.Int32,System.String)">
            <summary>
            获取Redis连接
            注：此对象无需一直创建，建议使用单列模式
            </summary>
            <param name="serverIp">Redis服务器Ip</param>
            <param name="port">端口</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.RedisHelper.GetConnection(System.String)">
            <summary>
            获取Redis连接
            注：此对象无需一直创建，建议使用单列模式
            </summary>
            <param name="config">配置字符串</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.SqlServerHelper">
            <summary>
            SqlServer数据库操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.SqlServerHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nameOrConStr">数据库连接名或连接字符串</param>
        </member>
        <member name="M:Coldairarrow.Util.SqlServerHelper.GetDbAllTables(System.String)">
            <summary>
            获取数据库中的所有表
            </summary>
            <param name="schemaName">模式（架构）</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.SqlServerHelper.GetDbTableInfo(System.String)">
            <summary>
            通过连接字符串和表名获取数据库表的信息
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.SqlServerHelper.SaveEntityToFile(System.Collections.Generic.List{Coldairarrow.Util.TableInfo},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            生成实体文件
            </summary>
            <param name="infos">表字段信息</param>
            <param name="tableName">表名</param>
            <param name="tableDescription">表描述信息</param>
            <param name="filePath">文件路径（包含文件名）</param>
            <param name="nameSpace">实体命名空间</param>
            <param name="schemaName">架构（模式）名</param>
        </member>
        <member name="M:Coldairarrow.Util.AutofacHelper.GetService``1">
            <summary>
            获取全局服务
            警告：此方法使用不当会造成内存溢出,一般开发请勿使用此方法,请使用GetScopeService
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.AutofacHelper.GetScopeService``1">
            <summary>
            获取当前请求为生命周期的服务
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.IDependency">
            <summary>
            注入标记
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.IFilter">
            <summary>
            过滤器
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.IFilter.OnActionExecuting(Castle.DynamicProxy.IInvocation)">
            <summary>
            执行前
            </summary>
            <param name="invocation">执行信息</param>
        </member>
        <member name="M:Coldairarrow.Util.IFilter.OnActionExecuted(Castle.DynamicProxy.IInvocation)">
            <summary>
            执行后
            </summary>
            <param name="invocation">执行信息</param>
        </member>
        <member name="T:Coldairarrow.Util.Extention">
            <summary>
            拓展类
            </summary>
            <summary>
            拓展方法静态类
            </summary>
            <summary>
            拓展类
            </summary>
            <summary>
            IQueryable"T"的拓展操作
            作者：Coldairarrow
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetIQueryable(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            获取IQueryable
            </summary>
            <param name="context">上下文</param>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToString(System.Byte[])">
            <summary>
            byte[]转string
            注：默认使用UTF8编码
            </summary>
            <param name="bytes">byte[]数组</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            byte[]转string
            </summary>
            <param name="bytes">byte[]数组</param>
            <param name="encoding">指定编码</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToBase64String(System.Byte[])">
            <summary>
            将byte[]转为Base64字符串
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToBinString(System.Byte)">
            <summary>
            转为二进制字符串
            </summary>
            <param name="aByte">字节</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToBinString(System.Byte[])">
            <summary>
            转为二进制字符串
            注:一个字节转为8位二进制
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.To0XString(System.Byte[])">
            <summary>
            Byte数组转为对应的16进制字符串
            </summary>
            <param name="bytes">Byte数组</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.To0XString(System.Byte)">
            <summary>
            Byte数组转为对应的16进制字符串
            </summary>
            <param name="aByte">一个Byte</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToASCIIString(System.Byte[])">
            <summary>
            转为ASCII字符串（一个字节对应一个字符）
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToASCIIString(System.Byte)">
            <summary>
            转为ASCII字符串（一个字节对应一个字符）
            </summary>
            <param name="aByte">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetXOR(System.Byte[])">
            <summary>
            获取异或值
            注：每个字节异或
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToInt(System.Byte[])">
            <summary>
            将字节数组转为Int类型
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToObject(System.Byte[])">
            <summary> 
            将一个序列化后的byte[]数组还原
            </summary>
            <param name="bytes"></param>         
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToObject``1(System.Byte[])">
            <summary>
            将一个序列化后的byte[]数组还原
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToFile(System.Byte[],System.String)">
            <summary>
            将字节数组保存为文件
            </summary>
            <param name="bytes">字节数组</param>
            <param name="path">文件完成路径</param>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToList``1(System.Data.DataTable)">
            <summary>
            DataTable转List
            </summary>
            <typeparam name="T">转换类型</typeparam>
            <param name="dt">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToCsvStr(System.Data.DataTable)">
             <summary>
            将DataTable转换为标准的CSV字符串
             </summary>
             <param name="dt">数据表</param>
             <returns>返回标准的CSV</returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetWeekOfYear(System.DateTime)">
              <summary> 
             获取某一日期是该年中的第几周
              </summary> 
              <param name="dateTime"> 日期 </param> 
              <returns> 该日期在该年中的周数 </returns> 
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToJsTimestamp(System.DateTime)">
            <summary>
            获取Js格式的timestamp
            </summary>
            <param name="dateTime">日期</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.JsGetTime(System.DateTime)">
            <summary>
            获取js中的getTime()
            </summary>
            <param name="dt">日期</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Default(System.DateTime)">
            <summary>
            返回默认时间1970-01-01
            </summary>
            <param name="dt">时间日期</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToCstTime(System.DateTime)">
            <summary>
            转为标准时间（北京时间，解决Linux时区问题）
            </summary>
            <param name="dt">当前时间</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToLocalTime(System.DateTime)">
            <summary>
            转为本地时间
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToUnixTimeStamp(System.DateTime)">
            <summary>
            转为转换为Unix时间戳格式(精确到秒)
            </summary>
            <param name="time">时间</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Done(System.Action,System.Action)">
            <summary>
            异步，按顺序执行第一个方法和第二个方法
            </summary>
            <param name="firstFunc">第一个方法</param>
            <param name="next">下一个方法</param>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Done(System.Func{System.Object},System.Action{System.Object})">
            <summary>
            异步，按顺序执行第一个方法和下一个方法
            </summary>
            <param name="firstFunc">第一个方法</param>
            <param name="next">下一个方法</param>
        </member>
        <member name="M:Coldairarrow.Util.Extention.AddProperty(System.Dynamic.ExpandoObject,System.String,System.Object)">
            <summary>
            添加属性
            </summary>
            <param name="expandoObj">动态对象</param>
            <param name="propertyName">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Coldairarrow.Util.Extention.SetProperty(System.Dynamic.ExpandoObject,System.String,System.Object)">
            <summary>
            设置属性
            </summary>
            <param name="expandoObj">动态对象</param>
            <param name="propertyName">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            获取属性
            </summary>
            <param name="expandoObj">动态对象</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetProperties(System.Dynamic.ExpandoObject)">
            <summary>
            获取所有属性
            </summary>
            <param name="expandoObj">动态对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.RemoveProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            删除属性
            </summary>
            <param name="expandoObj">动态对象</param>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToDataTable(System.Collections.Generic.IEnumerable{System.Dynamic.ExpandoObject})">
            <summary>
            将动态属性对象ExpandoObject列表转为DataTable
            </summary>
            <param name="dataList">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            组合继承属性选择表达式树,无拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            组合继承属性选择表达式树,1个拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="T1">拓展类型1</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            组合继承属性选择表达式树,2个拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="T1">拓展类型1</typeparam>
            <typeparam name="T2">拓展类型2</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            组合继承属性选择表达式树,3个拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="T1">拓展类型1</typeparam>
            <typeparam name="T2">拓展类型2</typeparam>
            <typeparam name="T3">拓展类型3</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            组合继承属性选择表达式树,4个拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="T1">拓展类型1</typeparam>
            <typeparam name="T2">拓展类型2</typeparam>
            <typeparam name="T3">拓展类型3</typeparam>
            <typeparam name="T4">拓展类型4</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            组合继承属性选择表达式树,5个拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="T1">拓展类型1</typeparam>
            <typeparam name="T2">拓展类型2</typeparam>
            <typeparam name="T3">拓展类型3</typeparam>
            <typeparam name="T4">拓展类型4</typeparam>
            <typeparam name="T5">拓展类型5</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            组合继承属性选择表达式树,6个拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="T1">拓展类型1</typeparam>
            <typeparam name="T2">拓展类型2</typeparam>
            <typeparam name="T3">拓展类型3</typeparam>
            <typeparam name="T4">拓展类型4</typeparam>
            <typeparam name="T5">拓展类型5</typeparam>
            <typeparam name="T6">拓展类型6</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            组合继承属性选择表达式树,7个拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="T1">拓展类型1</typeparam>
            <typeparam name="T2">拓展类型2</typeparam>
            <typeparam name="T3">拓展类型3</typeparam>
            <typeparam name="T4">拓展类型4</typeparam>
            <typeparam name="T5">拓展类型5</typeparam>
            <typeparam name="T6">拓展类型6</typeparam>
            <typeparam name="T7">拓展类型7</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            组合继承属性选择表达式树,8个拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="T1">拓展类型1</typeparam>
            <typeparam name="T2">拓展类型2</typeparam>
            <typeparam name="T3">拓展类型3</typeparam>
            <typeparam name="T4">拓展类型4</typeparam>
            <typeparam name="T5">拓展类型5</typeparam>
            <typeparam name="T6">拓展类型6</typeparam>
            <typeparam name="T7">拓展类型7</typeparam>
            <typeparam name="T8">拓展类型8</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.BuildExtendSelectExpre``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>
            组合继承属性选择表达式树,9个拓展参数
            TResult将继承TBase的所有属性
            </summary>
            <typeparam name="TBase">原数据类型</typeparam>
            <typeparam name="T1">拓展类型1</typeparam>
            <typeparam name="T2">拓展类型2</typeparam>
            <typeparam name="T3">拓展类型3</typeparam>
            <typeparam name="T4">拓展类型4</typeparam>
            <typeparam name="T5">拓展类型5</typeparam>
            <typeparam name="T6">拓展类型6</typeparam>
            <typeparam name="T7">拓展类型7</typeparam>
            <typeparam name="T8">拓展类型8</typeparam>
            <typeparam name="T9">拓展类型9</typeparam>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="expression">拓展表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            连接表达式与运算
            </summary>
            <typeparam name="T">参数</typeparam>
            <param name="one">原表达式</param>
            <param name="another">新的表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            连接表达式或运算
            </summary>
            <typeparam name="T">参数</typeparam>
            <param name="one">原表达式</param>
            <param name="another">新表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetConstantValue(System.Linq.Expressions.Expression)">
            <summary>
            获取表达式中的固定值
            </summary>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToSequentialGuid(System.Guid)">
            <summary>
            转为有序的GUID
            注：长度为50字符
            </summary>
            <param name="guid">新的GUID</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.IsAjaxRequest(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            判断是否为AJAX请求
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetDisplayUrlNoQuery(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取去掉查询参数的Url
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetToken(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取Token
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetJWTPayload(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取Token中的Payload
            </summary>
            <param name="req">请求</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Copy``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            复制序列中的数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="iEnumberable">原数据</param>
            <param name="startIndex">原数据开始复制的起始位置</param>
            <param name="length">需要复制的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            给IEnumerable拓展ForEach方法
            </summary>
            <typeparam name="T">模型类</typeparam>
            <param name="iEnumberable">数据源</param>
            <param name="func">方法</param>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            给IEnumerable拓展ForEach方法
            </summary>
            <typeparam name="T">模型类</typeparam>
            <param name="iEnumberable">数据源</param>
            <param name="func">方法</param>
        </member>
        <member name="M:Coldairarrow.Util.Extention.CastToList``1(System.Collections.IEnumerable)">
            <summary>
            IEnumerable转换为List'T'
            </summary>
            <typeparam name="T">参数</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将IEnumerable'T'转为对应的DataTable
            </summary>
            <typeparam name="T">数据模型</typeparam>
            <param name="iEnumberable">数据源</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetPagination``1(System.Collections.Generic.IEnumerable{``0},Coldairarrow.Util.Pagination)">
            <summary>
            获取分页数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="iEnumberable">数据源</param>
            <param name="pagination">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToAscllStr(System.Int32)">
            <summary>
            int转Ascll字符
            </summary>
            <param name="ascllCode"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToDateTime_From_JsGetTime(System.Int64)">
            <summary>
            jsGetTime转为DateTime
            </summary>
            <param name="jsGetTime">js中Date.getTime()</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetPagination``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            获取分页后的数据
            </summary>
            <typeparam name="T">实体参数</typeparam>
            <param name="source">IQueryable数据源</param>
            <param name="pageIndex">当前页</param>
            <param name="pageRows">每页行数</param>
            <param name="orderColumn">排序列</param>
            <param name="orderType">排序类型</param>
            <param name="count">总记录数</param>
            <param name="pages">总页数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetPagination``1(System.Linq.IQueryable{``0},Coldairarrow.Util.Pagination)">
            <summary>
            获取分页后的数据
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源IQueryable</param>
            <param name="pagination">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            动态排序法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">IQueryable数据源</param>
            <param name="sortColumn">排序的列</param>
            <param name="sortType">排序的方法</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.OrderBy``1(System.Linq.IQueryable{``0},System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            动态排序法
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="sort">排序规则，Key为排序列，Value为排序类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.AsExpandable``1(System.Linq.IQueryable{``0})">
            <summary>
            拓展IQueryable"T"方法操作
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.RemoveOrderBy``1(System.Linq.IQueryable{``0})">
            <summary>
            删除OrderBy表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.RemoveOrderBy(System.Linq.IQueryable)">
            <summary>
            删除OrderBy表达式
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.RemoveSkip``1(System.Linq.IQueryable{``0})">
            <summary>
            删除Skip表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.RemoveSkip(System.Linq.IQueryable)">
            <summary>
            删除Skip表达式
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.RemoveTake``1(System.Linq.IQueryable{``0})">
            <summary>
            删除Take表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.RemoveTake(System.Linq.IQueryable)">
            <summary>
            删除Take表达式
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetSkipCount(System.Linq.IQueryable)">
            <summary>
            获取Skip数量
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetTakeCount(System.Linq.IQueryable)">
            <summary>
            获取Take数量
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetOrderBy(System.Linq.IQueryable)">
            <summary>
            获取排序参数
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ChangeSource(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>
            切换数据源,保留原数据源中的Expression
            </summary>
            <param name="source">原数据源</param>
            <param name="targetSource">目标数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetObjQuery(System.Linq.IQueryable)">
            <summary>
            获取ObjectQuery
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToSql(System.Linq.IQueryable)">
            <summary>
            转为SQL语句，包括参数
            </summary>
            <param name="query">查询原源</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.Extention.RemoveOrderByVisitor">
            <summary>
            删除OrderBy表达式
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.Extention.RemoveSkipVisitor">
            <summary>
            删除Skip表达式
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.Extention.RemoveTakeVisitor">
            <summary>
            删除Take表达式
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.Extention.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToBytes(System.Object)">
            <summary>
            将一个object对象序列化，返回一个byte[]         
            </summary> 
            <param name="obj">能序列化的对象</param>
            <returns></returns> 
        </member>
        <member name="M:Coldairarrow.Util.Extention.IsNullOrEmpty(System.Object)">
            <summary>
            判断是否为Null或者空
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToJson(System.Object)">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <param name="obj">需要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.EntityToJson(System.Object)">
            <summary>
            实体类转json数据，速度快
            </summary>
            <param name="t">实体类</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.DeepClone``1(``0)">
            <summary>
            深复制
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToXmlStr``1(``0)">
            <summary>
            将对象序列化为XML字符串
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToXmlStr``1(``0,System.String)">
            <summary>
            将对象序列化为XML字符串
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="rootNodeName">根节点名(建议设为xml)</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ContainsProperty(System.Object,System.String)">
            <summary>
            是否拥有某属性
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取某属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            设置某属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ContainsField(System.Object,System.String)">
            <summary>
            是否拥有某字段
            </summary>
            <param name="obj">对象</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.GetGetFieldValue(System.Object,System.String)">
            <summary>
            获取某字段值
            </summary>
            <param name="obj">对象</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            设置某字段值
            </summary>
            <param name="obj">对象</param>
            <param name="fieldName">字段名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ChangeType(System.Object,System.Type)">
            <summary>
            改变实体类型
            </summary>
            <param name="obj">对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ChangeType``1(System.Object)">
            <summary>
            改变实体类型
            </summary>
            <typeparam name="T">目标泛型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ChangeType_ByConvert(System.Object,System.Type)">
            <summary>
            改变类型
            </summary>
            <param name="obj">原对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ReadToBytes(System.IO.Stream)">
            <summary>
            将流Stream转为byte数组
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ReadToString(System.IO.Stream)">
            <summary>
            将流读为字符串
            注：默认使用UTF-8编码
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ReadToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            将流读为字符串
            注：使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">指定编码</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToBytes_FromBase64Str(System.String)">
            <summary>
            转为字节数组
            </summary>
            <param name="base64Str">base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToMD5String(System.String)">
            <summary>
            转换为MD5加密后的字符串（默认加密为32位）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToMD5String16(System.String)">
            <summary>
            转换为MD5加密后的字符串（16位）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Base64Encode(System.String)">
            <summary>
            Base64加密
            注:默认采用UTF8编码
            </summary>
            <param name="source">待加密的明文</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Base64Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="source">待加密的明文</param>
            <param name="encoding">加密采用的编码方式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Base64Decode(System.String)">
            <summary>
            Base64解密
            注:默认使用UTF8编码
            </summary>
            <param name="result">待解密的密文</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Base64Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="result">待解密的密文</param>
            <param name="encoding">解密采用的编码方式，注意和加密时采用的方式一致</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Base64UrlEncode(System.String)">
            <summary>
            Base64Url编码
            </summary>
            <param name="text">待编码的文本字符串</param>
            <returns>编码的文本字符串</returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.Base64UrlDecode(System.String)">
            <summary>
            Base64Url解码
            </summary>
            <param name="base64UrlStr">使用Base64Url编码后的字符串</param>
            <returns>解码后的内容</returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToSHA1Bytes(System.String)">
            <summary>
            计算SHA1摘要
            注：默认使用UTF8编码
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToSHA1Bytes(System.String,System.Text.Encoding)">
            <summary>
            计算SHA1摘要
            </summary>
            <param name="str">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToSHA1String(System.String)">
            <summary>
            转为SHA1哈希加密字符串
            注：默认使用UTF8编码
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToSHA1String(System.String,System.Text.Encoding)">
            <summary>
            转为SHA1哈希
            </summary>
            <param name="str">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToSHA256String(System.String)">
            <summary>
            SHA256加密
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToHMACSHA256String(System.String,System.String)">
            <summary>
            HMACSHA256算法
            </summary>
            <param name="text">内容</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToInt(System.String)">
            <summary>
            string转int
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToLong(System.String)">
            <summary>
            string转long
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToInt_FromBinString(System.String)">
            <summary>
            二进制字符串转为Int
            </summary>
            <param name="str">二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToInt0X(System.String)">
            <summary>
            将16进制字符串转为Int
            </summary>
            <param name="str">数值</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToDouble(System.String)">
            <summary>
            转换为double
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToBytes(System.String)">
            <summary>
            string转byte[]
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            string转byte[]
            </summary>
            <param name="str">字符串</param>
            <param name="theEncoding">需要的编码</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.To0XBytes(System.String)">
            <summary>
            将16进制字符串转为Byte数组
            </summary>
            <param name="str">16进制字符串(2个16进制字符表示一个Byte)</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToASCIIBytes(System.String)">
            <summary>
            将ASCII码形式的字符串转为对应字节数组
            注：一个字节一个ASCII码字符
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToDateTime(System.String)">
            <summary>
            转换为日期格式
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToObject``1(System.String)">
            <summary>
            将Json字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.RemoveAt(System.String)">
            <summary>
            删除Json字符串中键中的@符号
            </summary>
            <param name="jsonStr">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToObject(System.String,System.Type)">
            <summary>
            将Json字符串反序列化为对象
            </summary>
            <param name="jsonStr">json字符串</param>
            <param name="type">对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.XmlStrToObject``1(System.String)">
            <summary>
            将XML字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="xmlStr">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.XmlStrToJObject(System.String)">
            <summary>
            将XML字符串反序列化为对象
            </summary>
            <param name="xmlStr">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToList``1(System.String)">
            <summary>
            将Json字符串转为List'T'
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonStr"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToDataTable(System.String)">
            <summary>
            将Json字符串转为DataTable
            </summary>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToJObject(System.String)">
            <summary>
            将Json字符串转为JObject
            </summary>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToJArray(System.String)">
            <summary>
            将Json字符串转为JArray
            </summary>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToEntity``1(System.String)">
            <summary>
            json数据转实体类,仅仅应用于单个实体类，速度非常快
            </summary>
            <typeparam name="T">泛型参数</typeparam>
            <param name="json">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToFirstUpperStr(System.String)">
            <summary>
            转为首字母大写
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToFirstLowerStr(System.String)">
            <summary>
            转为首字母小写
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToIPEndPoint(System.String)">
            <summary>
            转为网络终结点IPEndPoint
            </summary>=
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToEnum``1(System.String)">
            <summary>
            将枚举类型的文本转为枚举类型
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumText">枚举文本</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToMurmurHash(System.String)">
            <summary>
            转为MurmurHash
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.ParameterReplaceVisitor">
            <summary>
            继承ExpressionVisitor类，实现参数替换统一
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalData.FxAllTypes">
            <summary>
            框架所有自定义类
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.GlobalSwitch">
            <summary>
            全局控制
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.AdminId">
            <summary>
            超级管理员Id
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.ProjectName">
            <summary>
            项目名
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.GlobalSwitch.WebRootUrl">
            <summary>
            网站根地址
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.PublishRootUrl">
            <summary>
            发布后网站根地址
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.localRootUrl">
            <summary>
            本地调试根地址
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.DeleteMode">
            <summary>
            数据删除模式,默认逻辑删除
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.RunMode">
            <summary>
            运行模式
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.GlobalSwitch.WebRootPath">
            <summary>
            网站文件根路径
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.DatabaseType">
            <summary>
            默认数据库类型
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.DefaultDbConName">
            <summary>
            默认数据库连接名
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.CacheType">
            <summary>
            默认缓存
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.RedisConfig">
            <summary>
            Redis配置字符串
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.LoggerType">
            <summary>
            日志记录方式
            注:可用位运算,LoggerType.RDBMS | LoggerType.File表示同时记录到数据库和文件
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.GlobalSwitch.ElasticSearchNodes">
            <summary>
            ElasticSearch服务器配置
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.RunMode">
            <summary>
            运行模式
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.RunMode.LocalTest">
            <summary>
            本地测试模式，默认Admin账户，不需要登录
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.RunMode.Publish">
            <summary>
            发布模式
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.CacheType">
            <summary>
            默认缓存类型
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.CacheType.SystemCache">
            <summary>
            系统缓存
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.CacheType.RedisCache">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.DeleteMode">
            <summary>
            删除模式
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.DeleteMode.Physic">
            <summary>
            物理删除,即直接从数据库删除
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.DeleteMode.Logic">
            <summary>
            逻辑删除,即仅将Deleted字段置为true
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.AsposeOfficeHelper">
            <summary>
            使用Aspose组件的Office文件操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.AsposeOfficeHelper.DataTableToExcelBytes(System.Data.DataTable)">
            <summary>
            将DataTable输出为字节数组
            </summary>
            <param name="dt">表格数据</param>
            <returns>Byte数组</returns>
        </member>
        <member name="M:Coldairarrow.Util.AsposeOfficeHelper.ReadExcel(System.String)">
            <summary>
            从excel文件导入数据
            注：默认将第一行当作标题行，即不当作数据
            </summary>
            <param name="fileNmae">文件名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.AsposeOfficeHelper.ReadExcel(System.String,System.Boolean)">
            <summary>
            从excel文件导入数据
            </summary>
            <param name="fileNmae">文件名</param>
            <param name="exportColumnName">是否将第一行当作标题行</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.AsposeOfficeHelper.ReadExcel(System.Byte[])">
            <summary>
            从excel文件字节源导入
            注：默认将第一行当作标题行，即不当作数据
            </summary>
            <param name="fileBytes">文件字节源</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.AsposeOfficeHelper.ReadExcel(System.Byte[],System.Boolean)">
            <summary>
            从excel文件字节源导入
            </summary>
            <param name="fileBytes">文件字节源</param>
            <param name="exportColumnName">是否将第一行当作标题行</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.BaiduApiHelper">
            <summary>
            百度接口签名帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.BaiduApiHelper.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="accessKeyId">百度AccessKeyId(AK)</param>
            <param name="secretAccessKey">百度SecretAccessKey(SK)</param>
        </member>
        <member name="M:Coldairarrow.Util.BaiduApiHelper.RequestData(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            发送POST请求
            </summary>
            <param name="method">请求方法，需要大写，列如(POST)</param>
            <param name="host">主机地址列如(http://sms.bj.baidubce.com)</param>
            <param name="url">接口地址列如(/bce/v2/message)</param>
            <param name="paramters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.BaiduApiHelper.SendMsg(System.String,System.String)">
            <summary>
            发送短信
            </summary>
            <param name="phoneNum">手机号码</param>
            <param name="code">验证码</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.ConfigHelper">
            <summary>
            配置文件帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.ConfigHelper.GetValue(System.String)">
            <summary>
            从AppSettings获取key的值
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ConfigHelper.GetConnectionString(System.String)">
            <summary>
            获取连接字符串
            </summary>
            <param name="nameOfCon">连接字符串名</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.DbSearchHelper">
            <summary>
            数据库查询帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.DbSearchHelper.GetDbStatisData(System.Linq.IQueryable,System.String,System.String,System.String)">
            <summary>
            获取数据库统计数据
            </summary>
            <param name="dataSource">数据源</param>
            <param name="groupColumn">分组的列</param>
            <param name="statisColumn">统计的列</param>
            <param name="funcName">统计方法名(Max,Min,Average,Count())</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbSearchHelper.GetDbStatisData(System.Linq.IQueryable,System.String,Coldairarrow.Util.SearchEntry[])">
            <summary>
            获取数据库统计数据
            </summary>
            <param name="dataSource">数据源</param>
            <param name="groupColumn">分组的列</param>
            <param name="searchEntris">查询的配置项</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.DbSearchHelper.GetIQueryable(System.Object,System.String,System.String,System.String)">
            <summary>
            获取IQueryable
            </summary>
            <param name="obj">包含获取IQueryable方法的对象</param>
            <param name="funcName">获取IQueryable的方法名</param>
            <param name="entityName">实体名</param>
            <param name="nameSpace">命名空间</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.DbStatisData">
            <summary>
            统计数据模型
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.DbStatisData.Key">
            <summary>
            分组查询的列
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.DbStatisData.Value">
            <summary>
            统计后的数值
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.SearchEntry">
            <summary>
            统计查询配置项
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.SearchEntry.StatisColoum">
            <summary>
            统计的列
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.SearchEntry.ResultName">
            <summary>
            返回数据列名
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.SearchEntry.FuncName">
            <summary>
            统计方法名（Max,Min,Average,Count()等）
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.DelegateHelper">
            <summary>
            委托帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.DelegateHelper.RunAsync(System.Action,System.Action)">
            <summary>
            异步执行方法
            </summary>
            <param name="firstFunc">首先执行的方法</param>
            <param name="next">接下来执行的方法</param>
        </member>
        <member name="M:Coldairarrow.Util.DelegateHelper.RunAsync(System.Func{System.Object},System.Action{System.Object})">
            <summary>
            异步执行方法
            </summary>
            <param name="firstFunc">首先执行的方法</param>
            <param name="next">接下来执行的方法</param>
        </member>
        <member name="T:Coldairarrow.Util.Helper.EmailHelper">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.Helper.EmailHelper.SendMail(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="Name">发件人名字</param>
            <param name="receive">接收邮箱</param>
            <param name="sender">发送邮箱</param>
            <param name="password">邮箱密码</param>
            <param name="host">邮箱主机</param>
            <param name="port">邮箱端口</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Helper.JsonHelper.SerializeJSON``1(``0)">
            <summary>
            将实体类序列化为JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Helper.JsonHelper.DeserializeJSON``1(System.String)">
            <summary>
            反序列化JSON
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Helper.JsonHelper.ConvertToTimeStamp(System.DateTime)">
            <summary>
            日期转换为时间戳（时间戳单位秒）
            </summary>
            <param name="TimeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.EnumHelper.ToOptionList(System.Type)">
            <summary>
            将枚举类型转为选项列表
            注：value为值,text为显示内容
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.EnumHelper.ToMultipleText(System.Collections.Generic.List{System.Int32},System.Type)">
            <summary>
            多选枚举转为对应文本,逗号隔开
            </summary>
            <param name="values">多个值</param>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.EnumHelper.ToMultipleText(System.String,System.Type)">
            <summary>
            多选枚举转为对应文本,逗号隔开
            </summary>
            <param name="values">多个值逗号隔开</param>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.ExceptionHelper">
            <summary>
            异常处理帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.ExceptionHelper.GetExceptionAddr(System.Exception)">
            <summary>
            获取异常位置
            </summary>
            <param name="e">异常</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ExceptionHelper.GetExceptionAllMsg(System.Exception,System.Int32)">
            <summary>
            获取异常消息
            </summary>
            <param name="ex">捕捉的异常</param>
            <param name="level">内部异常层级</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ExceptionHelper.GetExceptionAllMsg(System.Exception)">
            <summary>
            获取异常消息
            </summary>
            <param name="ex">捕捉的异常</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.FileHelper">
            <summary>
            文件操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.FileHelper.Exists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="path">文件目录</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.FileHelper.GetCurrentDir">
            <summary>
            获取当前程序根目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.FileHelper.WriteTxt(System.String,System.String)">
            <summary>
            输出字符串到文件
            注：使用系统默认编码;若文件不存在则创建新的,若存在则覆盖
            </summary>
            <param name="content">内容</param>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Coldairarrow.Util.FileHelper.WriteTxt(System.String,System.String,System.Text.Encoding)">
            <summary>
            输出字符串到文件
            注：使用自定义编码;若文件不存在则创建新的,若存在则覆盖
            </summary>
            <param name="content">内容</param>
            <param name="path">文件路径</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Coldairarrow.Util.FileHelper.WriteTxt(System.String,System.String,System.IO.FileMode)">
            <summary>
            输出字符串到文件
            注：使用自定义模式,使用UTF-8编码
            </summary>
            <param name="content">内容</param>
            <param name="path">文件路径</param>
            <param name="fileModel">输出方法</param>
        </member>
        <member name="M:Coldairarrow.Util.FileHelper.WriteTxt(System.String,System.String,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            输出字符串到文件
            注：使用自定义编码以及写入模式
            </summary>
            <param name="content">内容</param>
            <param name="path">文件路径</param>
            <param name="encoding">字符编码</param>
            <param name="fileModel">写入模式</param>
        </member>
        <member name="M:Coldairarrow.Util.FileHelper.WriteTxt(System.String,System.String,System.Text.Encoding,System.Nullable{System.IO.FileMode})">
            <summary>
            输出字符串到文件
            注：使用自定义编码以及写入模式
            </summary>
            <param name="content">内容</param>
            <param name="path">文件路径</param>
            <param name="encoding">字符编码</param>
            <param name="fileModel">写入模式</param>
        </member>
        <member name="M:Coldairarrow.Util.FileHelper.WriteLog(System.String,System.String)">
            <summary>
            输出日志到指定文件
            </summary>
            <param name="msg">日志消息</param>
            <param name="path">日志文件位置（默认为D:\测试\a.log）</param>
        </member>
        <member name="T:Coldairarrow.Util.GuidHelper">
            <summary>
            GUID帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.GuidHelper.GenerateKey">
            <summary>
            生成主键
            </summary>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.HttpHelper">
            <summary>
            Http请求操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.GetData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起GET请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.PostData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},Coldairarrow.Util.ContentType,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头</param>
            <param name="contentType">请求的ContentType</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.PostData(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            发起POST请求
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="url">地址</param>
            <param name="body">请求体</param>
            <param name="contentType">请求的ContentType</param>
            <param name="headers">请求头</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.RequestData(Coldairarrow.Util.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.String},Coldairarrow.Util.ContentType,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            请求数据
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="method">请求方法</param>
            <param name="url">URL地址</param>
            <param name="paramters">参数</param>
            <param name="headers">请求头信息</param>
            <param name="contentType">请求数据类型</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.RequestData(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            请求数据
            注：若使用证书,推荐使用X509Certificate2的pkcs12证书
            </summary>
            <param name="method">请求方法</param>
            <param name="url">请求地址</param>
            <param name="body">请求的body内容</param>
            <param name="contentType">请求数据类型</param>
            <param name="headers">请求头</param>
            <param name="cerFile">证书</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.GetAllRequestParams(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取所有请求的参数（包括get参数和post参数）
            </summary>
            <param name="context">请求上下文</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.BuildGetFullUrl(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            构建完全Url
            </summary>
            <param name="url">Url</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.GetHtml(System.String)">
            <summary>
            从URL获取html文档
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.SafeSignRequest(System.String,System.String,System.String,System.String)">
            <summary>
            发起安全签名请求
            注：使用本框架签名算法,ContentType为application/json
            </summary>
            <param name="url">地址</param>
            <param name="body">请求body</param>
            <param name="appId">应用Id</param>
            <param name="appSecret">应用密钥</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.HttpHelper.BuildApiSign(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            生成接口签名sign
            注：md5(appId+time+guid+body+appSecret)
            </summary>
            <param name="appId">应用Id</param>
            <param name="appSecret">应用密钥</param>
            <param name="guid">唯一GUID</param>
            <param name="time">时间</param>
            <param name="body">请求体</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.HttpMethod">
            <summary>
            Http请求方法定义
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.ContentType.Form">
            <summary>
            传统Form表单,即application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.ContentType.Json">
            <summary>
            使用Json,即application/json
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.ImgHelper">
            <summary>
            图片操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.GetImgFromFile(System.String)">
            <summary>
            从文件获取图片
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.GetImgFromBase64(System.String)">
            <summary>
            从base64字符串读入图片
            </summary>
            <param name="base64">base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.GetImgFromBase64Url(System.String)">
            <summary>
            从URL格式的Base64图片获取真正的图片
            即去掉data:image/jpg;base64,这样的格式
            </summary>
            <param name="base64Url">图片Base64的URL形式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.CompressImg(System.Drawing.Image,System.Int32)">
            <summary>
            压缩图片
            注:等比压缩
            </summary>
            <param name="img">原图片</param>
            <param name="width">压缩后宽度</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.CompressImg(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            压缩图片
            </summary>
            <param name="img">原图片</param>
            <param name="width">压缩后宽度</param>
            <param name="height">压缩后高度</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.ToBase64String(System.Drawing.Image)">
            <summary>
            将图片转为base64字符串
            默认使用jpg格式
            </summary>
            <param name="img">图片对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.ToBase64String(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            将图片转为base64字符串
            使用指定格式
            </summary>
            <param name="img">图片对象</param>
            <param name="imageFormat">指定格式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.ToBase64StringUrl(System.Drawing.Image)">
            <summary>
            将图片转为base64字符串
            默认使用jpg格式,并添加data:image/jpg;base64,前缀
            </summary>
            <param name="img">图片对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.ToBase64StringUrl(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            将图片转为base64字符串
            使用指定格式,并添加data:image/jpg;base64,前缀
            </summary>
            <param name="img">图片对象</param>
            <param name="imageFormat">指定格式</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.GetBase64String(System.String)">
            <summary>
            获取真正的图片base64数据
            即去掉data:image/jpg;base64,这样的格式
            </summary>
            <param name="base64UrlStr">带前缀的base64图片字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgHelper.GetImgUrl(System.String)">
            <summary>
            将图片的URL或者Base64字符串转为图片并上传到服务器，返回上传后的完整图片URL
            </summary>
            <param name="imgBase64OrUrl">URL地址或者Base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgVerifyCodeHelper.BuildVerifyCode(System.Int32)">
            <summary>
            生成图片验证码
            </summary>
            <param name="length">验证码字符数</param>
            <returns>图片byte[]和code</returns>
        </member>
        <member name="F:Coldairarrow.Util.ImgVerifyCodeHelper.VerifyCodeFactory.character">
            <summary>  
            验证码的字符集，去掉了一些容易混淆的字符  
            </summary>  
        </member>
        <member name="M:Coldairarrow.Util.ImgVerifyCodeHelper.VerifyCodeFactory.CreateValidateCode(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="codeType">验证码类型(0-字母数字混合,1-数字,2-字母)</param>
            <param name="codeCount">验证码字符个数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ImgVerifyCodeHelper.VerifyCodeFactory.CreateValidateCode(System.Int32)">
            <summary>     
            生成验证码     
            </summary>     
            <param name="length">指定验证码的长度</param>     
            <returns></returns>     
        </member>
        <member name="M:Coldairarrow.Util.ImgVerifyCodeHelper.VerifyCodeFactory.CreateValidateGraphic(System.String,System.Single,System.Int32)">
            <summary>     
            创建验证码的图片     
            </summary>        
            <param name="validateCode">验证码</param>  
            <param name="fontsize"></param>
            <param name="height"></param>
        </member>
        <member name="M:Coldairarrow.Util.ImgVerifyCodeHelper.VerifyCodeFactory.GetImageWidth(System.Int32)">
            <summary>     
            得到验证码图片的长度     
            </summary>     
            <param name="validateNumLength">验证码的长度</param>     
            <returns></returns>     
        </member>
        <member name="M:Coldairarrow.Util.ImgVerifyCodeHelper.VerifyCodeFactory.GetImageHeight">
            <summary>     
            得到验证码的高度     
            </summary>     
            <returns></returns>     
        </member>
        <member name="T:Coldairarrow.Util.IocHelper">
            <summary>
            Ioc容器帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.IocHelper.RegisterType``2">
            <summary>
            注册类型
            </summary>
            <typeparam name="TFrom">定义类型</typeparam>
            <typeparam name="TTo">实现类型</typeparam>
        </member>
        <member name="M:Coldairarrow.Util.IocHelper.RegisterType``2(System.String)">
            <summary>
            注册类型
            </summary>
            <param name="name">注册名</param>
            <typeparam name="TFrom">定义类型</typeparam>
            <typeparam name="TTo">实现类型</typeparam>
        </member>
        <member name="M:Coldairarrow.Util.IocHelper.RegisterType(System.Type,System.Type,System.String)">
            <summary>
            注册类型
            </summary>
            <param name="typeFrom">定义类型</param>
            <param name="typeTo">实现类型</param>
            <param name="name">注册名</param>
        </member>
        <member name="M:Coldairarrow.Util.IocHelper.Resolve``1">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.IocHelper.Resolve``1(System.Object[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="paramters">构造参数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.IocHelper.Resolve``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">注册名</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.IocHelper.Resolve``1(System.String,System.Object[])">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">注册名</param>
            <param name="paramters">构造参数</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.IocHelper.Resolve(System.Type,System.String,System.Object[])">
            <summary>
            获取对象
            </summary>
            <param name="typeFrom">对象类型</param>
            <param name="name">注册名</param>
            <param name="paramters">构造参数</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.IpHelper">
            <summary>
            Ip地址帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.IpHelper.GetLocalIp">
            <summary>
            获取本地IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.IpHelper.GetFirstAvailablePort">
            <summary>
            获取第一个可用的端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.IpHelper.PortIsAvailable(System.Int32)">
            <summary>
            检查指定端口是否已用
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.IpHelper.PortIsUsed">
            <summary>
            获取操作系统已用的端口号
            </summary>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.JobHelper">
            <summary>
            时间帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.JobHelper.SetIntervalJob(System.Action,System.TimeSpan)">
            <summary>
            设置一个时间间隔的循环操作
            </summary>
            <param name="action">执行的操作</param>
            <param name="timeSpan">时间间隔</param>
        </member>
        <member name="M:Coldairarrow.Util.JobHelper.SetDailyJob(System.Action,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置每天定时任务
            </summary>
            <param name="action">执行的任务</param>
            <param name="h">时</param>
            <param name="m">分</param>
            <param name="s">秒</param>
        </member>
        <member name="M:Coldairarrow.Util.JWTHelper.GetToken(System.String,System.String)">
            <summary>
            生成Token
            </summary>
            <param name="payloadJsonStr">数据JSON字符串</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.JWTHelper.GetPayload(System.String)">
            <summary>
            获取Token中的数据
            </summary>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.JWTHelper.GetPayload``1(System.String)">
            <summary>
            获取Token中的数据
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="token">token</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.JWTHelper.CheckToken(System.String,System.String)">
            <summary>
            校验Token
            </summary>
            <param name="token">token</param>
            <param name="secret">密钥</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.LinqHelper">
            <summary>
            Linq操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.LinqHelper.True``1">
            <summary>
            创建初始条件为True的表达式
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.LinqHelper.False``1">
            <summary>
            创建初始条件为False的表达式
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.LogHelper">
            <summary>
            日志帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.LogHelper.WriteLog_LocalTxt(System.String)">
            <summary>
            写入日志到本地TXT文件
            注：日志文件名为"A_log.txt",目录为根目录
            </summary>
            <param name="log">日志内容</param>
        </member>
        <member name="T:Coldairarrow.Util.LoopHelper">
            <summary>
            循环帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.LoopHelper.Loop(System.Int32,System.Action)">
            <summary>
            循环指定次数
            </summary>
            <param name="count">循环次数</param>
            <param name="method">执行的方法</param>
        </member>
        <member name="M:Coldairarrow.Util.LoopHelper.Loop(System.Int32,System.Action{System.Int32})">
            <summary>
            循环指定次数
            </summary>
            <param name="count">循环次数</param>
            <param name="method">执行的方法</param>
        </member>
        <member name="M:Coldairarrow.Util.PathHelper.GetUrl(System.String)">
            <summary>
            获取Url
            </summary>
            <param name="virtualUrl">虚拟Url</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.PathHelper.GetAbsolutePath(System.String)">
            <summary>
            获取绝对路径
            </summary>
            <param name="virtualPath">虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.PathHelper.GetProjectRootpath">
            <summary>
            获取项目代码根目录
            </summary>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.QRCodeHelper">
            <summary>
            二维码生成帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.QRCodeHelper.BuildQRCode(System.String)">
            <summary>
            生成二维码，默认边长为250px
            </summary>
            <param name="content">二维码内容</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.QRCodeHelper.BuildQRCode(System.String,System.Int32)">
            <summary>
            生成二维码,自定义边长
            </summary>
            <param name="content">二维码内容</param>
            <param name="imgSize">二维码边长px</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.QRCodeHelper.BuildQRCode(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            生成二维码
            注：自定义边长以及颜色
            </summary>
            <param name="content">二维码内容</param>
            <param name="imgSize">二维码边长px</param>
            <param name="background">二维码底色</param>
            <param name="foreground">二维码前景色</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.QRCodeHelper.BuildQRCode_Logo(System.String,System.Drawing.Bitmap)">
            <summary>
            生成二维码并添加Logo
            注：默认生成边长为250px的二维码
            </summary>
            <param name="content">二维码内容</param>
            <param name="logo">logo图片</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.QRCodeHelper.BuildQRCode_Logo(System.String,System.Int32,System.Drawing.Bitmap)">
            <summary>
            生成二维码并添加Logo
            注：自定义边长
            </summary>
            <param name="content">二维码内容</param>
            <param name="imgSize">二维码边长px</param>
            <param name="logo">logo图片</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.QRCodeHelper.BuildQRCode_Logo(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Bitmap)">
            <summary>
            生成二维码并添加Logo
            注：自定义边长以及颜色
            </summary>
            <param name="content">二维码内容</param>
            <param name="imgSize">二维码边长px</param>
            <param name="background">二维码底色</param>
            <param name="foreground">二维码前景色</param>
            <param name="logo">logo图片</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.QRCodeHelper.BuildBarCode(System.String)">
            <summary>
            生成条形码
            注：默认宽150px,高50px
            </summary>
            <param name="content">条形码内容</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.QRCodeHelper.BuildBarCode(System.String,System.Int32,System.Int32)">
            <summary>
            生成条形码
            注：自定义尺寸
            </summary>
            <param name="content">条形码内容</param>
            <param name="width">宽度px</param>
            <param name="height">高度px</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.QRCodeHelper.ReadContent(System.Drawing.Bitmap)">
            <summary>
            从二维码读取内容
            </summary>
            <param name="image">二维码</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.RandomHelper">
            <summary>
            Random随机数帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.RandomHelper.Next(System.Int32,System.Int32)">
            <summary>
            下一个随机数
            </summary>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.RandomHelper.Next``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            下一个随机值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="source">值的集合</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.TaskHelper">
            <summary>
            异步转同步,防止ASP.NET中死锁
            https://stackoverflow.com/questions/5095183/how-would-i-run-an-async-taskt-method-synchronously
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.TreeHelper">
            <summary>
            树结构帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.TreeHelper.BuildTree``1(System.Collections.Generic.List{``0})">
            <summary>
            建造树结构
            </summary>
            <param name="allNodes">所有的节点</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.TreeHelper.GetChildren``1(System.Collections.Generic.List{``0},``0,System.Boolean)">
            <summary>
            获取所有子节点
            注：包括自己
            </summary>
            <typeparam name="T">节点类型</typeparam>
            <param name="allNodes">所有节点</param>
            <param name="parentNode">父节点</param>
            <param name="includeSelf">是否包括自己</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.TreeHelper._GetChildren``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            获取所有子节点
            </summary>
            <typeparam name="T">树模型（TreeModel或继承它的模型）</typeparam>
            <param name="nodes">所有节点列表</param>
            <param name="parentNode">父节点Id</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.TreeHelper.HaveChildren``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            判断当前节点是否有子节点
            </summary>
            <typeparam name="T">树模型</typeparam>
            <param name="nodes">所有节点</param>
            <param name="nodeId">当前节点Id</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.TypeBuilderHelper">
            <summary>
            运行时创建类型
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.TypeBuilderHelper.BuildType(Coldairarrow.Util.TypeConfig)">
            <summary>
            创建类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.TypeBuilderHelper.GetConfig(System.Type)">
            <summary>
            获取配置
            </summary>
            <param name="type">原类型</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.TypeConfig">
            <summary>
            类型配置
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TypeConfig.FullName">
            <summary>
            类型名
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TypeConfig.AssemblyName">
            <summary>
            程序集名
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TypeConfig.Properties">
            <summary>
            拥有的属性
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TypeConfig.Attributes">
            <summary>
            拥有的特性
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.PropertyConfig">
            <summary>
            属性配置
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.PropertyConfig.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.PropertyConfig.PropertyType">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.PropertyConfig.Attributes">
            <summary>
            属性包含的自定义特性
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.AttributeConfig">
            <summary>
            特性配置
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.AttributeConfig.Attribute">
            <summary>
            特性类型
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.AttributeConfig.ConstructorArgs">
            <summary>
            构造函数参数
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.AttributeConfig.Properties">
            <summary>
            初始化属性
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.XmlHelper">
            <summary>
            XML文档操作帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.XmlHelper.Serialize(System.Object)">
            <summary>
            序列化为XML字符串
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.AjaxResult">
            <summary>
            Ajax请求结果
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.AjaxResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.AjaxResult.ErrorCode">
            <summary>
            错误代码：
            1：未登录
            其它待定义
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.AjaxResult.Msg">
            <summary>
            返回消息
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.AjaxResult`1">
            <summary>
            Ajax请求结果
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.AjaxResult`1.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.AjaxResult`1.Total">
            <summary>
            总数据量（仅分页时有效）
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.DatabaseType.SqlServer">
            <summary>
            SqlServer数据库
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.DatabaseType.MySql">
            <summary>
            MySql数据库
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.DatabaseType.Oracle">
            <summary>
            Oracle数据库
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.DatabaseType.PostgreSql">
            <summary>
            PostgreSql数据库
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.DbTableInfo">
            <summary>
            数据库所有表的信息
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.DbTableInfo.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.DbTableInfo.Description">
            <summary>
            表描述说明
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.DynamicModel">
            <summary>
            动态数据模型类
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.DynamicModel.Item(System.String)">
            <summary>
            索引器
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.DynamicModel.AddProperty(System.String,System.Object)">
            <summary>
            添加属性
            </summary>
            <param name="key">属性名</param>
            <param name="obj">属性值</param>
        </member>
        <member name="M:Coldairarrow.Util.DynamicModel.SetProperty(System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="key">属性名</param>
            <param name="obj">属性值</param>
        </member>
        <member name="M:Coldairarrow.Util.DynamicModel.GetProperty(System.String)">
            <summary>
            获取属性值
            </summary>
            <param name="key">属性名</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.FileEntry">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.FileEntry.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.FileEntry.FileBytes">
            <summary>
            文件字节
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.LoggerType">
            <summary>
            日志记录类型
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.LoggerType.Console">
            <summary>
            输出到控制台
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.LoggerType.File">
            <summary>
            使用txt文件记录日志,默认存放目录为/A_Logs/yyy-MM/yyyy-MM-dd.txt
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.LoggerType.RDBMS">
            <summary>
            使用关系型数据库记录日志,例如SQlServer、MySQL、Oracle等
            </summary>
        </member>
        <member name="F:Coldairarrow.Util.LoggerType.ElasticSearch">
            <summary>
            使用ElasticSearch记录日志
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.LogType">
            <summary>
            系统日志类型
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.Pagination">
            <summary>
            数据表格分页
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.Pagination.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.Pagination.PageRows">
            <summary>
            每页行数
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.Pagination.SortField">
            <summary>
            排序列
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.Pagination.SortType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.Pagination.Total">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.Pagination.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.SelectOption">
            <summary>
            前端SelectOption
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.TableInfo">
            <summary>
            数据库表信息
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TableInfo.ColumnId">
            <summary>
            字段Id
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TableInfo.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TableInfo.Type">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TableInfo.IsKey">
            <summary>
            是否为主键
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TableInfo.IsNullable">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TableInfo.Description">
            <summary>
            字段描述说明
            </summary>
        </member>
        <member name="T:Coldairarrow.Util.TreeModel">
            <summary>
            树模型（可以作为父类）
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TreeModel.Id">
            <summary>
            唯一标识Id
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TreeModel.Value">
            <summary>
            数据值
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TreeModel.ParentId">
            <summary>
            父Id
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TreeModel.Level">
            <summary>
            节点深度
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TreeModel.Text">
            <summary>
            显示的内容
            </summary>
        </member>
        <member name="P:Coldairarrow.Util.TreeModel.Children">
            <summary>
            孩子节点
            </summary>
        </member>
        <member name="T:Microsoft.AspNetCore.Mvc.Filters.Extention">
            <summary>
            拓展类
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Filters.Extention.ContainsFilter``1(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            是否拥有某过滤器
            </summary>
            <typeparam name="T">过滤器类型</typeparam>
            <param name="actionExecutingContext">上下文</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Mvc.Extention.Scrpit(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)">
            <summary>
            获取最新的s文件或css文件
            注：解决缓存问题，只有文件修改后才会获取最新版
            </summary>
            <param name="helper"></param>
            <param name="scriptVirtualPath"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.Extention">
            <summary>
            拓展类
            </summary>
        </member>
    </members>
</doc>
